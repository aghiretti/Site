{"frames":[{"func":"covid %>% mutate(date = as.Date(date), continent = replace(continent, \n    continent == \"\", \"Other\")) %>% mutate_if(covid$continent == \n    \"\", \"Other\") %>% tibble()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tibble(.)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tibble_quos(xs[!is.null], .rows, .name_repair)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval_tidy(xs[[j]], mask)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_if(., covid$continent == \"\", \"Other\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"manip_if(.tbl, .predicate, .funs, enquo(.funs), caller_env(), \n    ..., .caller = \"mutate_if\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tbl_if_syms(.tbl, .predicate, .env, .include_group_vars = .include_group_vars)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"syms(tbl_if_vars(.tbl, .p, .env, ..., .include_group_vars = .include_group_vars))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"map(x, sym)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(.x, .f, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tbl_if_vars(.tbl, .p, .env, ..., .include_group_vars = .include_group_vars)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(c(\"`.p` is invalid.\", x = \"`.p` should have the same size as the number of variables in the tibble.\", \n    i = glue(\"`.p` is size {length(.p)}.\"), i = glue(\"The tibble has {length(tibble_vars)} columns, {including} the grouping variables.\", \n        including = if (.include_group_vars) \"including\" else \"non including\")))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Errore: `.p` is invalid.\n\u001B[31mx\u001B[39m `.p` should have the same size as the number of variables in the tibble.\n\u001B[34mi\u001B[39m `.p` is size 57992.\n\u001B[34mi\u001B[39m The tibble has 52 columns, non including the grouping variables.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n"}