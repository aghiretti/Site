transition_m2 <- transition_m2 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6)) %>%
select(-c("name"))
ll = rbind(transition_m1,transition_m2)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(janitor)
library(LMest)
library(rmarkdown)
setwd("C:\\Users\\USR02193\\OneDrive - Chiesi Farmaceutici S.p.A\\Documents\\Marketing\\Markov")
demo <-  read.csv("hh_demographic.csv")
transactions <- read.csv("transaction_data.csv")
# clean column names
colnames(transactions) <- make_clean_names(colnames(transactions))
colnames(demo) <- make_clean_names(colnames(demo))
# build the variable indicating the quarter
quarter <- rep(seq(1:8), each = 120)
day <- seq(1:length(quarter))
time_quarter <- data.frame(quarter,day)
# assign the transactions to the corresponding quarter by joining on the day
adjust_transactions <- transactions %>% left_join(time_quarter, by = c("day" = "day"))
customer_quarter <- adjust_transactions %>%
# join with demographics data
left_join(demo, by = c("household_key" = "household_key")) %>%
# group by customer Id
group_by(household_key, quarter) %>%
# obtain total spend per customer
summarise(tot_spend = sum(sales_value)) %>%
ungroup()
# compute quartiles
quantiles <- customer_quarter %>%
group_by(quarter) %>%
summarise(q1 = quantile(tot_spend,0.25),
q2 = quantile(tot_spend,0.5),
q3 = quantile(tot_spend,0.75))
# assign score to each customer
# in this loop scores are assigned to each customer for each quarter
s <- c()
k <- c()
q <- c()
score <- s
key <- k
quarter <- q
for(j in seq(1:6)){
ll <- customer_quarter %>% filter(quarter == j)
qq <- quantiles %>% filter(quarter == j)
for(i in 1:nrow(ll)){
k[i] <- ll$household_key[i]
q[i] <- j
if(ll$tot_spend[i] <= qq[2]){
s[i] <- 1
}else if(ll$tot_spend[i] > qq[2] & ll$tot_spend[i] <= qq[3]){
s[i] <- 2
}else if(ll$tot_spend[i] > qq[3] & ll$tot_spend[i] <= qq[4]){
s[i] <- 3}
else if(ll$tot_spend[i] > qq[4]) {s[i] <- 4}
}
quarter <- c(quarter,q)
score <- c(score,s)
key <- c(key,k)
}
# obtain the scores given to the customers over the different quarters
quarter_scores <- data.frame(household_key = key, score,  quarter)
# bind scores to the customers spend
customer_quarter <- customer_quarter %>%
left_join(quarter_scores, by = c("household_key" = "household_key", "quarter" = "quarter")) %>%
dplyr::select(-c("tot_spend")) %>% data.frame()
# bind demographic info and remove customers with missing values
data_fit <- customer_quarter %>%
# join tables
left_join(demo, by = c("household_key")) %>%
# remove households with missing values
drop_na()
# rename variables for model fitting
c_name <- colnames(data_fit)
nc <- ncol(data_fit)
c_name[3] <- paste("Y",sep ="",colnames(data_fit)[3])
c_name[4:nc] <- paste(paste("X",seq(1:(nc-3)),sep=""),colnames(data_fit)[4:nc],sep = "")
colnames(data_fit) <- c_name
# convert cexplanatory variables int factors
response <-  colnames(data_fit)[4:nc]
data_fit[response] <- lapply(data_fit[response], factor)
# extract customers which have at least one expense in each quarter
idx = data_fit %>% group_by(household_key) %>%
# obtain number of quarters per household
summarise(n = n()) %>% ungroup() %>%
# filter out households
filter(n==6) %>%
# select  hoousehold key and transform it to a vector
dplyr::select(household_key) %>% as.vector()
data_fit <- data_fit %>% filter(household_key %in% idx$household_key)
#  define formulas for model fitting
fmBasic = lmestFormula(data = data_fit,response = "Y")
fmLatent = lmestFormula(data = data_fit, response = "Y", LatentInitial = "X")
fmLatent2 = lmestFormula(data = data_fit, response = "Y")
#set.seed(9845)
# fit the three different models
# M1
mod1 <- lmest(responsesFormula = fmBasic$responsesFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4, modBasic = 1)
#M2
mod2 <- lmest(responsesFormula = fmLatent$responsesFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4, modBasic = 0)
#M3
mod3 <- lmest(responsesFormula = fmLatent2$responsesFormula,
latentFormula = fmLatent2$latentFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4)
fit <- data.frame(model = c("M1", "M2"), aic = c(mod1$aic,mod2$aic), bic = c(mod1$bic,mod2$bic))
fit %>%  paged_table()
prior <- rbind(mod1$piv,mod2$piv) %>% data.frame()
colnames(prior) <- c("low spender", "middle-low spender", "middle-high spender", "high spender")
prior <-  cbind(model = c("M1", "M2"),prior)
prior %>%  paged_table()
trans_m1 <- data.frame(mod1$Pi)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1 <- trans_m1 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6)) %>%
select(-c("name"))
trans_m2 <- data.frame(mod2$Pi)
trans_m2 <- cbind(model = "M2",trans_m2)
trans_m2 <- trans_m2 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6)) %>%
select(-c("name"))
ll = rbind(trans_m1,trans_m2)
reshape(ll,direction="wide", idvar = "model" , timvar = "t")
gg = reshape(ll,direction="wide", idvar = "model" , timvar = "t")
gg
ll
str(ll)
head(ll)
m = lapply(mod1$Pi, function(x) colnames(x) = c("p1","p2","p3","p4")
m = lapply(mod1$Pi, function(x) colnames(x) = c("p1","p2","p3","p4"))
m
trans_m1
trans_m1 <- data.frame(mod1$Pi)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1 <- trans_m1 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6)) %>%
select(-c("name"))
trans_m1
trans_m1 <- data.frame(mod1$Pi)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
ll = trans_m1
colnames(ll) <- rep(c("p1","p2","p3","p4"),4)
ll
colnames(ll)[2:ncol(ll)] <- rep(c("p1","p2","p3","p4"),6)
ll
trans_m1 <- data.frame(mod1$Pi)
trans_m1
colnames(trans_m1) <- rename(rep(c("p1","p2","p3","p4"),6))
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 %>% pivot_longer(-c("model"))
ll <- trans_m1 %>% mutate(r = row_number()) %>% group_by(r) %>% pivot_longer(-c("model"))
ll
ll
ll
ll <- trans_m1 %>% mutate(r = row_number())
ll <- trans_m1 %>% pivot_longer(-c("model"))mutate(r = row_number()) %>% group_by(r)
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r)
ll
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r) %>%
pivot_wider(names_from = name, values_from = value)
ll
ll %>% reshape(idvar = r, timevar = "p")
ll %>% reshape(idvar = r, timevar = "p", direction = "wide")
ll %>% reshape(idvar = "r", timevar = "p", direction = "wide")
ll %>% reshape(idvar = "r", timevar = "name", direction = "wide")
ll
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r)
ll
ll %>% reshape(idvar = "r", timevar = "name", direction = "wide")
ll %>% reshape(idvar = c("r","model"), timevar = "name", direction = "wide")
ll
ll %>% reshape(idvar = c("r","model"), timevar = "name", direction = "wide")
ll
ll %>% pivot_wider(names_from = name, values_from = value)
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
ll <- trans_m1 %>% mutate(r = row_number()) %>% group_by(r) %>%
pivot_wider(names_from = name, values_from = value)
ll
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r) %>%
pivot_wider(names_from = name,)
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r) %>%
pivot_wider(names_from = name, values_from = value)
ll
trans_m1
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>% group_by(r)
ll
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>%
dplyr::select(name,value)%>%
pivot_wider(names_from = name, values_from = value)
ll
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>%
dplyr::select(name,value)%>%
pivot_wider(names_from = name, values_from = value)
ll
ll$p1
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>%
dplyr::select(r,name,value)%>%
pivot_wider(names_from = name, values_from = value)
ll
?bind_rows
trans_m1
trans_m1 %>% bind_rows()
trans_m1 %>% bind_cols()
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1
colnames(trans_m1)[2:ncol(trans_m1)] <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- trans_m1 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6))
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1 <- trans_m1 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6)) %>%
select(-c("name"))
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
ll <- trans_m1 %>% pivot_longer(-c("model")) %>% mutate(r = row_number()) %>%
dplyr::select(r,name,value)%>%
pivot_wider(names_from = name, values_from = value)
trans_m1 <- trans_m1 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6)) %>%
select(-c("name"))
trans_m2 <- data.frame(mod2$Pi)
trans_m2 <- cbind(model = "M2",trans_m2)
trans_m2 <- trans_m2 %>% pivot_longer(cols = -c("model")) %>%
mutate(t = rep(seq(1:4), each = 4, 6),
p = rep(paste("P",seq(1:4), sep = ""), each = 4,6)) %>%
select(-c("name"))
ll = rbind(trans_m1,trans_m2)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(janitor)
library(LMest)
library(rmarkdown)
setwd("C:\\Users\\USR02193\\OneDrive - Chiesi Farmaceutici S.p.A\\Documents\\Marketing\\Markov")
demo <-  read.csv("hh_demographic.csv")
transactions <- read.csv("transaction_data.csv")
# clean column names
colnames(transactions) <- make_clean_names(colnames(transactions))
colnames(demo) <- make_clean_names(colnames(demo))
# build the variable indicating the quarter
quarter <- rep(seq(1:8), each = 120)
day <- seq(1:length(quarter))
time_quarter <- data.frame(quarter,day)
# assign the transactions to the corresponding quarter by joining on the day
adjust_transactions <- transactions %>% left_join(time_quarter, by = c("day" = "day"))
customer_quarter <- adjust_transactions %>%
# join with demographics data
left_join(demo, by = c("household_key" = "household_key")) %>%
# group by customer Id
group_by(household_key, quarter) %>%
# obtain total spend per customer
summarise(tot_spend = sum(sales_value)) %>%
ungroup()
# compute quartiles
quantiles <- customer_quarter %>%
group_by(quarter) %>%
summarise(q1 = quantile(tot_spend,0.25),
q2 = quantile(tot_spend,0.5),
q3 = quantile(tot_spend,0.75))
# assign score to each customer
# in this loop scores are assigned to each customer for each quarter
s <- c()
k <- c()
q <- c()
score <- s
key <- k
quarter <- q
for(j in seq(1:6)){
ll <- customer_quarter %>% filter(quarter == j)
qq <- quantiles %>% filter(quarter == j)
for(i in 1:nrow(ll)){
k[i] <- ll$household_key[i]
q[i] <- j
if(ll$tot_spend[i] <= qq[2]){
s[i] <- 1
}else if(ll$tot_spend[i] > qq[2] & ll$tot_spend[i] <= qq[3]){
s[i] <- 2
}else if(ll$tot_spend[i] > qq[3] & ll$tot_spend[i] <= qq[4]){
s[i] <- 3}
else if(ll$tot_spend[i] > qq[4]) {s[i] <- 4}
}
quarter <- c(quarter,q)
score <- c(score,s)
key <- c(key,k)
}
# obtain the scores given to the customers over the different quarters
quarter_scores <- data.frame(household_key = key, score,  quarter)
# bind scores to the customers spend
customer_quarter <- customer_quarter %>%
left_join(quarter_scores, by = c("household_key" = "household_key", "quarter" = "quarter")) %>%
dplyr::select(-c("tot_spend")) %>% data.frame()
# bind demographic info and remove customers with missing values
data_fit <- customer_quarter %>%
# join tables
left_join(demo, by = c("household_key")) %>%
# remove households with missing values
drop_na()
# rename variables for model fitting
c_name <- colnames(data_fit)
nc <- ncol(data_fit)
c_name[3] <- paste("Y",sep ="",colnames(data_fit)[3])
c_name[4:nc] <- paste(paste("X",seq(1:(nc-3)),sep=""),colnames(data_fit)[4:nc],sep = "")
colnames(data_fit) <- c_name
# convert explanatory variables into factors
response <-  colnames(data_fit)[4:nc]
data_fit[response] <- lapply(data_fit[response], factor)
# extract customers which have at least one expense in each quarter
idx = data_fit %>% group_by(household_key) %>%
# obtain number of quarters per household
summarise(n = n()) %>% ungroup() %>%
# filter out households
filter(n==6) %>%
# select  hoousehold key and transform it to a vector
dplyr::select(household_key) %>% as.vector()
data_fit <- data_fit %>% filter(household_key %in% idx$household_key)
#  define formulas for model fitting
fmBasic = lmestFormula(data = data_fit,response = "Y")
fmLatent = lmestFormula(data = data_fit, response = "Y", LatentInitial = "X")
fmLatent2 = lmestFormula(data = data_fit, response = "Y")
#set.seed(9845)
# fit the three different models
# M1
mod1 <- lmest(responsesFormula = fmBasic$responsesFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4, modBasic = 1)
#M2
mod2 <- lmest(responsesFormula = fmLatent$responsesFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4, modBasic = 0)
#M3
mod3 <- lmest(responsesFormula = fmLatent2$responsesFormula,
latentFormula = fmLatent2$latentFormula,
index = c("household_key","quarter"),
data = data_fit, k = 4)
fit <- data.frame(model = c("M1", "M2"), aic = c(mod1$aic,mod2$aic), bic = c(mod1$bic,mod2$bic))
fit %>%  paged_table()
prior <- rbind(mod1$piv,mod2$piv) %>% data.frame()
colnames(prior) <- c("low spender", "middle-low spender", "middle-high spender", "high spender")
prior <-  cbind(model = c("M1", "M2"),prior)
prior %>%  paged_table()
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1
trans_m1 <- cbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:24], trans_m1[,25:29])
ncol(trans_m1)
trans_m1 <- cbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:24])
trtrans_m1
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
ll <- cbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:24])
ll
ll <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:24])
ll
ll <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
ll
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
trans_m1 <- cbind(model = "M1",trans_m1)
trans_m1
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),6)
trans_m1)
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),6)
trans_m1)
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),6),
trans_m1)
trans_m1
nrow(trans_m1)
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
nrow(trans_m1)
trans_m1 <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- rbind(trans_m1[,1:4],trans_m1[,5:8],trans_m1[,9:12],trans_m1[,13:16],
trans_m1[,17:20], trans_m1[,21,24])
trans_m1
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),4),
trans_m1)
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),each = 4),
trans_m1)
nrow(trans_m1)
4*6
trans_m1 <- rbind(trans_m1[,1:4],
trans_m1[,5:8],
trans_m1[,9:12],
trans_m1[,13:16],
trans_m1[,17:20],
trans_m1[,21,24])
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1 <- rbind(trans_m1[,1:4],
trans_m1[,5:8],
trans_m1[,9:12],
trans_m1[,13:16],
trans_m1[,17:20],
trans_m1[,21,24])
trans_m1
mod1$Pi
trans_m1
trans_m1 <- data.frame(mod1$Pi)
colnames(trans_m1) <- rep(c("p1","p2","p3","p4"),6)
trans_m1
trans_m1[,1:4]
trans_m1[,1:4]
trans_m1[,5:8]
trans_m1[,5:8]
trans_m1[,9:12]
trans_m1[,13:16]
trans_m1[,17:20]
trans_m1[,21,24]
trans_m1 <- rbind(trans_m1[,1:4],
trans_m1[,5:8],
trans_m1[,9:12],
trans_m1[,13:16],
trans_m1[,17:20],
trans_m1[,21:24])
trans_m1 <- cbind(model = "M1",
t = rep(seq(1:6),each = 4),
trans_m1)
trans_m1
trans_m2 <- data.frame(mod2$Pi)
colnames(trans_m2) <- rep(c("p1","p2","p3","p4"),6)
trans_m2 <- rbind(trans_m2[,1:4],
trans_m2[,5:8],
trans_m2[,9:12],
trans_m2[,13:16],
trans_m2[,17:20],
trans_m2[,21:24])
trans_m2
library(corrplot)
trans_m1
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(janitor)
library(LMest)
library(rmarkdown)
library(corrplot)
library(patchwork)
trans_m2 %>% filter(t ==2) %>% corrplot()
trans_m2 %>% filter(t==2)
trans_m1 %>% filter(t==2) %>% corrplot()
trans_m1 %>% filter(t==2)
trans_m1 %>% filter(t==2) %>%
dplyr::select(p1,p2,p3,p4) %>%  as.matrix() %>% corrplot()
